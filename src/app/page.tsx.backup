'use client';

import { useState, useEffect, useCallback, memo } from 'react';
import { ReturnItem, ReturnState } from '@/types/returns';
import { parseReturnExcel, parseProductExcel, downloadCellmateCSV } from '@/utils/excel';

// CompletedReturnRow 컴포넌트
const CompletedReturnRow = memo(({ 
  item, 
  index, 
  date, 
  onReturnToPending, 
  onDetailReasonClick 
}: { 
  item: ReturnItem; 
  index: number; 
  date: string;
  onReturnToPending: (item: ReturnItem, date: string) => void;
  onDetailReasonClick: (date: string, index: number) => void;
}) => {
  const needsDetailReason = item.returnReason.includes('파손') || item.returnReason.includes('불량');
  
  // 클릭 핸들러를 메모이제이션
  const handleDetailClick = useCallback(() => {
    if (needsDetailReason) {
      onDetailReasonClick(date, index);
    }
  }, [needsDetailReason, onDetailReasonClick, date, index]);

  const handleReturnClick = useCallback(() => {
    onReturnToPending(item, date);
  }, [onReturnToPending, item, date]);

  return (
    <tr>
      <td className="px-4 py-2 border text-center">
        <div className="overflow-hidden whitespace-nowrap">
          {item.customerName}
        </div>
      </td>
      <td className="px-4 py-2 border text-left">
        <div className="overflow-hidden whitespace-nowrap" style={{
          fontSize: item.productName.length > 15 ? `${Math.min(1, Math.max(0.7, 12 * (15 / item.productName.length)))}rem` : '1rem'
        }}>
          {item.productName}
        </div>
      </td>
      <td className="px-4 py-2 border text-left">
        <div className="overflow-hidden whitespace-nowrap" style={{
          fontSize: item.optionName?.length > 10 ? `${Math.min(1, Math.max(0.7, 12 * (10 / item.optionName.length)))}rem` : '1rem'
        }}>
          {item.optionName}
        </div>
      </td>
      <td className="px-4 py-2 border text-center">{item.quantity}</td>
      <td className="px-4 py-2 border text-left">
        <div 
          className={`overflow-hidden whitespace-nowrap ${
            needsDetailReason ? 'cursor-pointer text-red-500 hover:text-red-700' : ''
          }`}
          onClick={handleDetailClick}
          style={{
            fontSize: item.returnReason?.length > 10 ? `${Math.min(1, Math.max(0.7, 12 * (10 / item.returnReason.length)))}rem` : '1rem'
          }}
        >
          {item.returnReason}
        </div>
      </td>
      <td className="px-4 py-2 border text-center">{item.barcode}</td>
      <td className="px-4 py-2 border text-center">
        <button
          onClick={handleReturnClick}
          className="text-red-500 hover:text-red-700 text-3xl font-bold"
          title="입고전으로 되돌리기"
        >
          ×
        </button>
      </td>
    </tr>
  );
}, (prevProps, nextProps) => {
  // 최적화된 비교 함수 추가
  return (
    prevProps.item === nextProps.item &&
    prevProps.date === nextProps.date &&
    prevProps.index === nextProps.index
  );
});

// PendingReturnRow 컴포넌트
const PendingReturnRow = memo(({ 
  item, 
  index,
  isSelected,
  isSameAsPrev,
  isSameAsNext,
  onSelect
}: { 
  item: ReturnItem;
  index: number;
  isSelected: boolean;
  isSameAsPrev: boolean;
  isSameAsNext: boolean;
  onSelect: (index: number) => void;
}) => {
  // 체크박스 변경 핸들러를 메모이제이션
  const handleChange = useCallback(() => {
    onSelect(index);
  }, [onSelect, index]);

  return (
    <tr className={`
      ${item.returnReason.includes('파손') || item.returnReason.includes('불량')
        ? 'text-red-500'
        : ''}
      hover:bg-gray-50
      ${!isSameAsPrev ? 'border-t-4 border-t-black' : ''}
      ${!isSameAsNext ? 'border-b-4 border-b-black' : ''}
    `}>
      <td className="px-4 py-2 border">
        <input
          type="checkbox"
          checked={isSelected}
          onChange={handleChange}
          className="w-4 h-4"
        />
      </td>
      <td className="px-4 py-2 border">{item.customerName}</td>
      <td className="px-4 py-2 border">{item.orderNumber}</td>
      <td className="px-4 py-2 border whitespace-normal">{item.productName}</td>
      <td className="px-4 py-2 border">{item.optionName}</td>
      <td className="px-4 py-2 border text-center">{item.quantity}</td>
      <td className="px-4 py-2 border">{item.returnTrackingNumber}</td>
      <td className="px-4 py-2 border">{item.returnReason}</td>
      <td className="px-4 py-2 border">{item.barcode}</td>
    </tr>
  );
}, (prevProps, nextProps) => {
  // 최적화된 비교 함수 추가
  return (
    prevProps.isSelected === nextProps.isSelected &&
    prevProps.isSameAsPrev === nextProps.isSameAsPrev &&
    prevProps.isSameAsNext === nextProps.isSameAsNext &&
    prevProps.item === nextProps.item
  );
});

export default function Home() {
  const [returnState, setReturnState] = useState<ReturnState>({
    pendingReturns: [],
    completedReturns: [],
    products: []
  });
  const [trackingNumber, setTrackingNumber] = useState('');
  const [showProductCount, setShowProductCount] = useState(false);
  const [selectedItems, setSelectedItems] = useState<number[]>([]);
  const [selectedDate, setSelectedDate] = useState<string>('');
  const [showDatePicker, setShowDatePicker] = useState(false);
  const [detailReason, setDetailReason] = useState('');
  const [selectedReturn, setSelectedReturn] = useState<{
    date: string;
    index: number;
  } | null>(null);

  // 상품명 유사도 계산 함수
  function calculateSimilarity(str1: string, str2: string): number {
    if (!str1 || !str2) return 0;
    
    const s1 = str1.toLowerCase().trim();
    const s2 = str2.toLowerCase().trim();
    
    // 정확히 일치하면 1 반환
    if (s1 === s2) return 1;
    
    const words1 = s1.split(/\s+/);
    const words2 = s2.split(/\s+/);
    
    let matches = 0;
    const totalWords = Math.max(words1.length, words2.length);
    
    words1.forEach(word1 => {
      if (words2.some(word2 => word2.includes(word1) || word1.includes(word2))) {
        matches++;
      }
    });
    
    return matches / totalWords;
  }

  useEffect(() => {
    fetchData();
  }, []);

  async function fetchData() {
    try {
      const response = await fetch('/api/returns');
      const data = await response.json();
      setReturnState(data);
    } catch (error) {
      console.error('Failed to fetch data:', error);
    }
  }

  async function handleReturnFileUpload(event: React.ChangeEvent<HTMLInputElement>) {
    const file = event.target.files?.[0];
    if (!file) return;

    try {
      const returns = await parseReturnExcel(file);
      const updatedReturns = returns.map(item => {
        // 자체상품코드로 매칭 시도
        const productByZigzagCode = returnState.products.find(p => 
          p.zigzagProductCode && item.zigzagProductCode && 
          p.zigzagProductCode.trim() === item.zigzagProductCode.trim()
        );

        // 스마트스토어 상품의 경우 사입상품명으로 매칭 시도
        const productsByPurchaseName = !productByZigzagCode ? 
          returnState.products.filter(p => 
            p.purchaseName === item.productName
          ) : null;

        // 매칭된 상품들 중에서 옵션명 유사도가 가장 높은 것 선택
        const matchedProduct = productsByPurchaseName?.length ? 
          productsByPurchaseName.reduce((best, current) => {
            const currentSimilarity = calculateSimilarity(current.optionName || '', item.optionName || '');
            const bestSimilarity = calculateSimilarity(best.optionName || '', item.optionName || '');
            return currentSimilarity > bestSimilarity ? current : best;
          }, productsByPurchaseName[0]) : null;

        const finalMatchedProduct = productByZigzagCode || matchedProduct;
        
        // 지그재그 상품인 경우 자체상품코드 표시
        if (item.zigzagProductCode) {
          return {
            ...item,
            productName: item.zigzagProductCode,
            barcode: finalMatchedProduct?.barcode || '',
            optionName: finalMatchedProduct?.optionName || item.optionName
          };
        }
        
        // 스마트스토어 상품이고 매칭된 경우
        if (finalMatchedProduct) {
          return {
            ...item,
            productName: finalMatchedProduct.purchaseName,
            barcode: finalMatchedProduct.barcode || '',
            optionName: finalMatchedProduct.optionName || item.optionName
          };
        }

        // 매칭되지 않은 경우
        return {
          ...item,
          barcode: '',
          optionName: item.optionName
        };
      });

      const newState = {
        ...returnState,
        pendingReturns: [...returnState.pendingReturns, ...updatedReturns]
      };

      await updateData('UPDATE_RETURNS', {
        pendingReturns: newState.pendingReturns,
        completedReturns: newState.completedReturns
      });

      setReturnState(newState);
    } catch (error) {
      console.error('Failed to process return file:', error);
    }
  }

  async function handleProductFileUpload(event: React.ChangeEvent<HTMLInputElement>) {
    const file = event.target.files?.[0];
    if (!file) return;

    try {
      const products = await parseProductExcel(file);
      const newState = {
        ...returnState,
        products
      };

      await updateData('UPDATE_PRODUCTS', { products });
      setReturnState(newState);
    } catch (error) {
      console.error('Failed to process product file:', error);
    }
  }

  async function handleTrackingNumberSubmit(event: React.FormEvent) {
    event.preventDefault();
    if (!trackingNumber) return;

    try {
      await updateData('COMPLETE_RETURN', { trackingNumber });
      await fetchData();
      setTrackingNumber('');
    } catch (error) {
      console.error('Failed to complete return:', error);
    }
  }

  async function updateData(action: string, data: any) {
    try {
      await fetch('/api/returns', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ action, data })
      });
    } catch (error) {
      console.error('Failed to update data:', error);
    }
  }

  function handleDeletePendingReturns() {
    const newPendingReturns = returnState.pendingReturns.filter(
      (_, index) => !selectedItems.includes(index)
    );
    
    const newState = {
      ...returnState,
      pendingReturns: newPendingReturns
    };

    updateData('UPDATE_RETURNS', {
      pendingReturns: newPendingReturns,
      completedReturns: returnState.completedReturns
    });
    setReturnState(newState);
    setSelectedItems([]);
  }

  // 콜백 함수들을 메모이제이션
  const handleSelectItem = useCallback((index: number) => {
    setSelectedItems(prev => {
      const newSelected = new Set(prev);
      if (newSelected.has(index)) {
        newSelected.delete(index);
      } else {
        newSelected.add(index);
      }
      return Array.from(newSelected);
    });
  }, []);

  const handleReturnToPending = useCallback(async (item: ReturnItem, date: string) => {
    // completedReturns에서 해당 항목 제거
    const updatedCompletedReturns = returnState.completedReturns.filter(
      item => !(item.customerName === item.customerName && 
               item.orderNumber === item.orderNumber && 
               item.productName === item.productName &&
               new Date(item.completedAt!).toLocaleDateString() === date)
    );

    // 상태를 PENDING으로 변경하고 completedAt 제거
    const { completedAt, status, ...pendingItem } = item;
    const newPendingItem = {
      ...pendingItem,
      status: 'PENDING' as const
    };

    const newState = {
      ...returnState,
      pendingReturns: [...returnState.pendingReturns, newPendingItem],
      completedReturns: updatedCompletedReturns
    };

    await updateData('UPDATE_RETURNS', {
      pendingReturns: newState.pendingReturns,
      completedReturns: newState.completedReturns
    });

    setReturnState(newState);
  }, [returnState]);

  const handleDetailReasonClick = useCallback((date: string, index: number) => {
    setSelectedReturn({ date, index });
  }, []);

  function handleDownloadCellmateCSV(date: string, returns: ReturnItem[]) {
    downloadCellmateCSV(returns, date);
  }

  const completedReturnsByDate = returnState.completedReturns.reduce((acc, item) => {
    const date = new Date(item.completedAt!).toLocaleDateString();
    if (!acc[date]) acc[date] = [];
    acc[date].push(item);
    return acc;
  }, {} as Record<string, ReturnItem[]>);

  function openPendingModal() {
    const modal = document.getElementById('pendingModal') as HTMLDialogElement;
    if (modal) modal.showModal();
  }

  function closePendingModal() {
    const modal = document.getElementById('pendingModal') as HTMLDialogElement;
    if (modal) {
      modal.close();
      setSelectedItems([]);
    }
  }

  function openProductModal() {
    const modal = document.getElementById('productModal') as HTMLDialogElement;
    if (modal) modal.showModal();
  }

  function closeProductModal() {
    const modal = document.getElementById('productModal') as HTMLDialogElement;
    if (modal) modal.close();
  }

  async function handleDeleteAllProducts() {
    if (confirm('모든 상품 데이터를 삭제하시겠습니까?')) {
      const newState = {
        ...returnState,
        products: []
      };

      await updateData('UPDATE_PRODUCTS', { products: [] });
      setReturnState(newState);
    }
  }

  async function handleCompletePendingReturns() {
    const selectedReturns = returnState.pendingReturns.filter((_, index) => selectedItems.includes(index));
    const remainingReturns = returnState.pendingReturns.filter((_, index) => !selectedItems.includes(index));
    
    const newState = {
      ...returnState,
      pendingReturns: remainingReturns,
      completedReturns: [...returnState.completedReturns, ...selectedReturns.map(item => ({
        ...item,
        completedAt: new Date(),
        status: 'COMPLETED' as const
      }))]
    };

    await updateData('UPDATE_RETURNS', {
      pendingReturns: newState.pendingReturns,
      completedReturns: newState.completedReturns
    });
    
    setReturnState(newState);
    setSelectedItems([]);
  }

  async function handleReturnToPendingCallback(item: ReturnItem, date: string) {
    // completedReturns에서 해당 항목 제거
    const updatedCompletedReturns = returnState.completedReturns.filter(
      item => !(item.customerName === item.customerName && 
               item.orderNumber === item.orderNumber && 
               item.productName === item.productName &&
               new Date(item.completedAt!).toLocaleDateString() === date)
    );

    // 상태를 PENDING으로 변경하고 completedAt 제거
    const { completedAt, status, ...pendingItem } = item;
    const newPendingItem = {
      ...pendingItem,
      status: 'PENDING' as const
    };

    const newState = {
      ...returnState,
      pendingReturns: [...returnState.pendingReturns, newPendingItem],
      completedReturns: updatedCompletedReturns
    };

    await updateData('UPDATE_RETURNS', {
      pendingReturns: newState.pendingReturns,
      completedReturns: newState.completedReturns
    });

    setReturnState(newState);
  }

  async function handleRefreshPendingReturns() {
    const updatedReturns = returnState.pendingReturns.map(item => {
      // 자체상품코드로 매칭 시도
      const productByZigzagCode = returnState.products.find(p => 
        p.zigzagProductCode && item.zigzagProductCode && 
        p.zigzagProductCode.trim() === item.zigzagProductCode.trim()
      );

      // 스마트스토어 상품의 경우 사입상품명으로 매칭 시도
      const productsByPurchaseName = !productByZigzagCode ? 
        returnState.products.filter(p => 
          p.purchaseName === item.productName
        ) : null;

      // 매칭된 상품들 중에서 옵션명 유사도가 가장 높은 것 선택
      const matchedProduct = productsByPurchaseName?.length ? 
        productsByPurchaseName.reduce((best, current) => {
          const currentSimilarity = calculateSimilarity(current.optionName || '', item.optionName || '');
          const bestSimilarity = calculateSimilarity(best.optionName || '', item.optionName || '');
          return currentSimilarity > bestSimilarity ? current : best;
        }, productsByPurchaseName[0]) : null;

      const finalMatchedProduct = productByZigzagCode || matchedProduct;
      
      // 지그재그 상품인 경우 자체상품코드 표시
      if (item.zigzagProductCode) {
        return {
          ...item,
          productName: item.zigzagProductCode,
          barcode: finalMatchedProduct?.barcode || '',
          optionName: finalMatchedProduct?.optionName || item.optionName
        };
      }
      
      // 스마트스토어 상품이고 매칭된 경우
      if (finalMatchedProduct) {
        return {
          ...item,
          productName: finalMatchedProduct.purchaseName,
          barcode: finalMatchedProduct.barcode || '',
          optionName: finalMatchedProduct.optionName || item.optionName
        };
      }

      // 매칭되지 않은 경우
      return {
        ...item,
        barcode: '',
        optionName: item.optionName
      };
    });

    const newState = {
      ...returnState,
      pendingReturns: updatedReturns
    };

    await updateData('UPDATE_RETURNS', {
      pendingReturns: updatedReturns,
      completedReturns: returnState.completedReturns
    });

    setReturnState(newState);
  }

  // 날짜 이동 함수
  function moveDate(direction: 'prev' | 'next') {
    if (!selectedDate) return;
    
    const currentDate = new Date(selectedDate.split('.').map(part => part.trim()).join('-'));
    const newDate = new Date(currentDate);
    
    if (direction === 'prev') {
      newDate.setDate(newDate.getDate() - 1);
    } else {
      newDate.setDate(newDate.getDate() + 1);
    }
    
    setSelectedDate(newDate.toLocaleDateString());
  }

  function openCompletedModal() {
    const modal = document.getElementById('completedModal') as HTMLDialogElement;
    if (modal) {
      // 가장 최근 날짜를 기본값으로 설정
      const dates = Object.keys(completedReturnsByDate);
      if (dates.length > 0) {
        setSelectedDate(dates[dates.length - 1]);
      }
      modal.showModal();
    }
  }

  function closeCompletedModal() {
    const modal = document.getElementById('completedModal') as HTMLDialogElement;
    if (modal) modal.close();
  }

  async function handleDetailReasonSubmit(date: string, index: number) {
    if (!detailReason.trim()) return;

    const returnIndex = returnState.completedReturns.findIndex(
      (item, i) => new Date(item.completedAt!).toLocaleDateString() === date && i === index
    );

    if (returnIndex !== -1) {
      const updatedCompletedReturns = [...returnState.completedReturns];
      const currentItem = updatedCompletedReturns[returnIndex];
      const baseReason = currentItem.returnReason.split('(')[0].trim();
      
      updatedCompletedReturns[returnIndex] = {
        ...currentItem,
        returnReason: `${baseReason} (${detailReason})`
      };

      const newState = {
        ...returnState,
        completedReturns: updatedCompletedReturns
      };

      try {
        await updateData('UPDATE_RETURNS', {
          pendingReturns: returnState.pendingReturns,
          completedReturns: updatedCompletedReturns
        });

        setReturnState(newState);
        setDetailReason('');
        setSelectedReturn(null);
      } catch (error) {
        console.error('Failed to update detail reason:', error);
      }
    }
  }

  function closeDetailReasonModal() {
    setDetailReason('');
    setSelectedReturn(null);
  }

  const handleSelectAll = useCallback(() => {
    setSelectedItems(prev => 
      prev.length === returnState.pendingReturns.length
        ? []
        : Array.from({ length: returnState.pendingReturns.length }, (_, i) => i)
    );
  }, [returnState.pendingReturns.length]);

  return (
    <main className="container mx-auto p-4">
      <h1 className="text-2xl font-bold mb-6">반품 관리 시스템</h1>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-8">
        <div>
          <h2 className="text-lg font-semibold mb-2">반품 엑셀 업로드</h2>
          <input
            type="file"
            accept=".xlsx,.xls"
            onChange={handleReturnFileUpload}
            className="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100"
          />
        </div>
        
        <div>
          <h2 className="text-lg font-semibold mb-2">상품 리스트 엑셀 업로드</h2>
          <div className="space-y-2">
            <input
              type="file"
              accept=".xlsx,.xls"
              onChange={handleProductFileUpload}
              className="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100"
            />
            <button
              onClick={openProductModal}
              className="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 text-sm"
            >
              상품 데이터 확인 ({returnState.products.length}개)
            </button>

            <dialog id="productModal" className="fixed !m-auto inset-0 w-[95vw] h-[90vh] max-w-[1400px] p-6 rounded-lg shadow-xl bg-white resize-both overflow-auto">
              <div className="modal-content h-full flex flex-col">
                <div className="flex justify-between items-center mb-4">
                  <h3 className="text-xl font-bold">상품 리스트 ({returnState.products.length}개)</h3>
                  <button
                    onClick={closeProductModal}
                    className="text-gray-500 hover:text-gray-700"
                  >
                    ✕
                  </button>
                </div>
                <div className="flex-1 overflow-auto">
                  <table className="w-full border-collapse">
                    <thead className="sticky top-0 bg-white">
                      <tr className="bg-gray-100">
                        <th className="px-4 py-2 border w-[60px]">No.</th>
                        <th className="px-4 py-2 border w-[300px]">사입상품명</th>
                        <th className="px-4 py-2 border w-[300px]">상품명</th>
                        <th className="px-4 py-2 border w-[200px]">옵션명</th>
                        <th className="px-4 py-2 border w-[120px]">바코드</th>
                      </tr>
                    </thead>
                    <tbody>
                      {returnState.products.map((product, index) => (
                        <tr key={index} className="hover:bg-gray-50">
                          <td className="px-4 py-2 border text-center">{index + 1}</td>
                          <td className="px-4 py-2 border whitespace-normal">{product.purchaseName}</td>
                          <td className="px-4 py-2 border whitespace-normal">{product.productName}</td>
                          <td className="px-4 py-2 border whitespace-normal">{product.optionName}</td>
                          <td className="px-4 py-2 border">{product.barcode}</td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
                <div className="mt-4 flex justify-between pt-4 border-t">
                  <button
                    onClick={handleDeleteAllProducts}
                    className="bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600"
                  >
                    전체 삭제
                  </button>
                  <button
                    onClick={closeProductModal}
                    className="bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600"
                  >
                    닫기
                  </button>
                </div>
              </div>
            </dialog>
          </div>
        </div>
      </div>

      <div className="mb-8">
        <h2 className="text-lg font-semibold mb-4">입고전 ({returnState.pendingReturns.length})</h2>
        <button
          onClick={openPendingModal}
          className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
        >
          목록 보기
        </button>

        <dialog id="pendingModal" className="fixed !m-auto inset-0 w-[95vw] h-[90vh] max-w-[1400px] p-6 rounded-lg shadow-xl bg-white resize-both overflow-auto">
          <div className="modal-content h-full flex flex-col">
            <h3 className="text-xl font-bold mb-4">입고전 목록</h3>
            <div className="flex-1 overflow-auto">
              <div className="mb-4 flex justify-between items-center">
                <button
                  onClick={handleRefreshPendingReturns}
                  className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
                >
                  새로고침
                </button>
                {selectedItems.length > 0 && (
                  <button
                    onClick={handleDeletePendingReturns}
                    className="bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600"
                  >
                    선택항목 삭제 ({selectedItems.length}개)
                  </button>
                )}
              </div>
              <table className="w-full border-collapse">
                <thead className="sticky top-0 bg-white">
                  <tr className="bg-gray-100">
                    <th className="px-4 py-2 w-[40px] border">
                      <input
                        type="checkbox"
                        checked={selectedItems.length === returnState.pendingReturns.length && returnState.pendingReturns.length > 0}
                        onChange={handleSelectAll}
                        className="w-4 h-4"
                      />
                    </th>
                    <th className="px-4 py-2 w-[100px] border">고객명</th>
                    <th className="px-4 py-2 w-[120px] border">주문번호</th>
                    <th className="px-4 py-2 w-[300px] border">사입상품명</th>
                    <th className="px-4 py-2 w-[150px] border">옵션명</th>
                    <th className="px-4 py-2 w-[60px] border">수량</th>
                    <th className="px-4 py-2 w-[120px] border">반품송장번호</th>
                    <th className="px-4 py-2 w-[150px] border">반품사유</th>
                    <th className="px-4 py-2 w-[120px] border">바코드</th>
                  </tr>
                </thead>
                <tbody>
                  {returnState.pendingReturns.map((item, index) => {
                    const prevItem = index > 0 ? returnState.pendingReturns[index - 1] : null;
                    const nextItem = index < returnState.pendingReturns.length - 1 ? returnState.pendingReturns[index + 1] : null;
                    
                    const isSameAsPrev = prevItem && 
                      prevItem.customerName === item.customerName && 
                      prevItem.orderNumber === item.orderNumber;
                    
                    const isSameAsNext = nextItem && 
                      nextItem.customerName === item.customerName && 
                      nextItem.orderNumber === item.orderNumber;

                    return (
                      <PendingReturnRow
                        key={`${item.orderNumber}-${index}`}
                        item={item}
                        index={index}
                        isSelected={selectedItems.includes(index)}
                        isSameAsPrev={!!isSameAsPrev}
                        isSameAsNext={!!isSameAsNext}
                        onSelect={handleSelectItem}
                      />
                    );
                  })}
                </tbody>
              </table>
            </div>
            <div className="mt-4 flex justify-between pt-4 border-t">
              <button
                onClick={handleCompletePendingReturns}
                className={`bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 ${
                  selectedItems.length === 0 ? 'opacity-50 cursor-not-allowed' : ''
                }`}
                disabled={selectedItems.length === 0}
              >
                선택항목 입고 ({selectedItems.length}개)
              </button>
              <button
                onClick={closePendingModal}
                className="bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600"
              >
                닫기
              </button>
            </div>
          </div>
        </dialog>
      </div>

      <div className="mb-8">
        <h2 className="text-lg font-semibold mb-4">반품송장번호 입력</h2>
        <form onSubmit={handleTrackingNumberSubmit} className="flex gap-2">
          <input
            type="text"
            value={trackingNumber}
            onChange={(e) => setTrackingNumber(e.target.value)}
            placeholder="반품송장번호 입력"
            className="flex-1 px-4 py-2 border rounded"
          />
          <button
            type="submit"
            className="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600"
          >
            입고 처리
          </button>
        </form>
      </div>

      <div>
        <div className="flex justify-between items-center mb-4">
          <h2 className="text-lg font-semibold">입고완료</h2>
          <button
            onClick={openCompletedModal}
            className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
          >
            전체보기
          </button>
        </div>

        <dialog id="completedModal" className="fixed !m-auto inset-0 w-[95vw] h-[90vh] max-w-[1400px] p-6 rounded-lg shadow-xl bg-white resize-both overflow-auto">
          <div className="modal-content h-full flex flex-col">
            <div className="flex justify-between items-center mb-4">
              <div className="flex items-center gap-4">
                <h3 className="text-xl font-bold">입고완료 목록</h3>
                <div className="flex items-center gap-2">
                  <button
                    onClick={() => moveDate('prev')}
                    className="bg-gray-200 px-3 py-1 rounded hover:bg-gray-300"
                  >
                    ◀
                  </button>
                  <button
                    onClick={() => setShowDatePicker(!showDatePicker)}
                    className="bg-blue-500 text-white px-4 py-1 rounded hover:bg-blue-600"
                  >
                    {selectedDate || '날짜 선택'}
                  </button>
                  <button
                    onClick={() => moveDate('next')}
                    className="bg-gray-200 px-3 py-1 rounded hover:bg-gray-300"
                  >
                    ▶
                  </button>
                </div>
              </div>
              <button
                onClick={closeCompletedModal}
                className="text-gray-500 hover:text-gray-700"
              >
                ✕
              </button>
            </div>

            {showDatePicker && (
              <div className="absolute top-20 left-40 bg-white border rounded-lg shadow-lg p-4 z-10">
                <div className="grid grid-cols-7 gap-2">
                  {Object.keys(completedReturnsByDate).map((date) => (
                    <button
                      key={date}
                      onClick={() => {
                        setSelectedDate(date);
                        setShowDatePicker(false);
                      }}
                      className={`p-2 rounded ${
                        date === selectedDate
                          ? 'bg-blue-500 text-white'
                          : 'hover:bg-gray-100'
                      }`}
                    >
                      {new Date(date.split('.').map(part => part.trim()).join('-')).getDate()}
                    </button>
                  ))}
                </div>
              </div>
            )}

            <div className="flex-1 overflow-auto">
              {selectedDate && completedReturnsByDate[selectedDate] && (
                <div className="border rounded p-4">
                  <div className="flex justify-between items-center mb-2">
                    <h3 className="font-semibold">
                      {selectedDate} ({completedReturnsByDate[selectedDate].length}개)
                    </h3>
                    <button
                      onClick={() => handleDownloadCellmateCSV(selectedDate, completedReturnsByDate[selectedDate])}
                      className="bg-blue-500 text-white px-3 py-1 rounded text-sm hover:bg-blue-600"
                    >
                      셀메이트 엑셀 다운로드
                    </button>
                  </div>
                  <table className="min-w-full border-collapse">
                    <thead>
                      <tr className="bg-gray-100">
                        <th className="px-4 py-2 border text-center w-[100px]">고객명</th>
                        <th className="px-4 py-2 border text-center w-[300px]">상품명</th>
                        <th className="px-4 py-2 border text-center w-[150px]">옵션명</th>
                        <th className="px-4 py-2 border text-center w-[60px]">수량</th>
                        <th className="px-4 py-2 border text-center w-[150px]">반품사유</th>
                        <th className="px-4 py-2 border text-center w-[120px]">바코드</th>
                        <th className="px-4 py-2 border text-center w-[40px]">작업</th>
                      </tr>
                    </thead>
                    <tbody>
                      {completedReturnsByDate[selectedDate].map((item, index) => (
                        <CompletedReturnRow
                          key={`${item.orderNumber}-${index}`}
                          item={item}
                          index={index}
                          date={selectedDate}
                          onReturnToPending={handleReturnToPendingCallback}
                          onDetailReasonClick={handleDetailReasonClick}
                        />
                      ))}
                    </tbody>
                  </table>
                </div>
              )}
            </div>
          </div>
        </dialog>

        <div className="space-y-4">
          {Object.entries(completedReturnsByDate).map(([date, returns]) => (
            <div key={date} className="border rounded p-4">
              <div className="flex justify-between items-center mb-2">
                <h3 className="font-semibold">{date} ({returns.length}개)</h3>
                <button
                  onClick={() => handleDownloadCellmateCSV(date, returns)}
                  className="bg-blue-500 text-white px-3 py-1 rounded text-sm hover:bg-blue-600"
                >
                  셀메이트 엑셀 다운로드
                </button>
              </div>
              <table className="min-w-full border-collapse">
                <thead>
                  <tr className="bg-gray-100">
                    <th className="px-4 py-2 border text-center w-[100px]">고객명</th>
                    <th className="px-4 py-2 border text-center w-[300px]">상품명</th>
                    <th className="px-4 py-2 border text-center w-[150px]">옵션명</th>
                    <th className="px-4 py-2 border text-center w-[60px]">수량</th>
                    <th className="px-4 py-2 border text-center w-[150px]">반품사유</th>
                    <th className="px-4 py-2 border text-center w-[120px]">바코드</th>
                    <th className="px-4 py-2 border text-center w-[40px]">작업</th>
                  </tr>
                </thead>
                <tbody>
                  {returns.map((item, index) => (
                    <CompletedReturnRow
                      key={`${item.orderNumber}-${index}`}
                      item={item}
                      index={index}
                      date={date}
                      onReturnToPending={handleReturnToPendingCallback}
                      onDetailReasonClick={handleDetailReasonClick}
                    />
                  ))}
                </tbody>
              </table>
            </div>
          ))}
        </div>
      </div>

      {selectedReturn && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white p-6 rounded-lg shadow-xl max-w-md w-full">
            <h3 className="text-lg font-semibold mb-4">상세 사유 입력</h3>
            <textarea
              value={detailReason}
              onChange={(e) => setDetailReason(e.target.value)}
              className="w-full h-32 p-2 border rounded mb-4 resize-none"
              placeholder="상세 사유를 입력하세요..."
            />
            <div className="flex justify-end gap-2">
              <button
                onClick={() => handleDetailReasonSubmit(selectedReturn.date, selectedReturn.index)}
                className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
              >
                저장
              </button>
              <button
                onClick={closeDetailReasonModal}
                className="bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600"
              >
                취소
              </button>
            </div>
          </div>
        </div>
      )}
    </main>
  );
}
